version: '3.9'

services:
  auth_postgres:
    image: postgres:13
    container_name: auth_postgres
    environment:
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AUTH_POSTGRES_DB}
    expose:
      - "5432"
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${AUTH_POSTGRES_USER} -d ${AUTH_POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./auth/auth_postgres_db/db_init.sql:/docker-entrypoint-initdb.d/db_init.sql
      - ./auth/postgres_instance_auth/data:/var/lib/postgresql/data
    networks:
      - api_network

  auth_service:
    build: ./auth/
    container_name: auth_service
    volumes:
      - ./auth/:/usr/src/app
    ports:
      - "8000:8000"
    depends_on:
      auth_postgres:
        condition: service_healthy
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://auth_service:8000/auth/v1/ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - api_network

  file_storage_postgres:
    image: postgres:13
    container_name: file_storage_postgres
    environment:
      POSTGRES_USER: ${FILE_STORAGE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${FILE_STORAGE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${FILE_STORAGE_POSTGRES_DB}
    expose:
      - "5432"
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${FILE_STORAGE_POSTGRES_USER} -d ${FILE_STORAGE_POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./file_storage_api/file_storage_postgres_db/db_init.sql:/docker-entrypoint-initdb.d/db_init.sql
      - ./file_storage_api/postgres_instance_file_storage/data:/var/lib/postgresql/data
    networks:
      - api_network

  file_storage_service:
    build: ./file_storage_api/
    container_name: file_storage_service
    volumes:
      - ./file_storage_api/:/usr/src/app
    ports:
      - "8080:8080"
    depends_on:
      file_storage_postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://file_storage_service:8080/file-storage/v1/ping || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - api_network

  minio:
    image: minio/minio:latest
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: $MINIO_ROOT_USER
      MINIO_ROOT_PASSWORD: $MINIO_ROOT_PASSWORD
    command: server /data --console-address :9001
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} && mc admin info myminio"]
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - api_network

  create-bucket:
    image: minio/mc:latest
    environment:
      MC_HOST_minio: http://${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD}@minio:9000
    entrypoint:
      - sh
      - -c
      - |
        until mc ls minio > /dev/null 2>&1; do
          sleep 0.5
        done

        mc mb minio/${MINIO_BUCKET}
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - api_network

  nginx:
    container_name: nginx
    image: nginx:1.23.2
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/config:/etc/nginx/conf.d:ro
    depends_on:
      auth_service:
        condition: service_healthy
      file_storage_service:
        condition: service_healthy
    ports:
      - "80:80"
    networks:
      - api_network


volumes:
  minio_data:

networks:
  api_network:
